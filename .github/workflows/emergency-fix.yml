name: 🚨 Emergency Fix - 紧急修复前后端问题

on:
  workflow_dispatch:
    inputs:
      fix_type:
        description: '修复类型'
        required: true
        default: 'frontend'
        type: choice
        options:
          - frontend
          - backend  
          - both

jobs:
  emergency-fix:
    runs-on: ubuntu-latest
    steps:
      - name: 🚨 紧急修复系统
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "🚨 开始紧急修复..."
            echo "🔧 修复类型: ${{ github.event.inputs.fix_type }}"
            
            cd /opt/gin-vue-admin
            
            # 拉取最新修复代码
            echo "📥 拉取最新修复代码并强制覆盖..."
            git fetch origin
            git reset --hard origin/dev-mqtt
            
            # 创建完整的前端环境配置
            echo "📝 创建前端环境配置..."
            cat > web/.env.production << 'EOF'
            VITE_CLI_PORT = 80
            VITE_SERVER_PORT = 8888
            VITE_BASE_API = '/api'
            VITE_BASE_PATH = ''
            VITE_EDITOR = vscode
            VITE_POSITION = open
            NODE_ENV = production
            EOF
            
            # 根据修复类型执行对应操作
            if [[ "${{ github.event.inputs.fix_type }}" == "frontend" || "${{ github.event.inputs.fix_type }}" == "both" ]]; then
              echo "🎨 修复前端服务..."
              
              # 停止前端服务
              docker-compose -f deploy/docker-compose.yml stop frontend || true
              
              # 删除前端镜像和容器
              docker rmi gin-vue-admin-frontend:latest || true
              docker container prune -f || true
              
              # 清理Docker构建缓存
              docker builder prune -f || true
              
              # 设置Docker构建环境变量
              export DOCKER_BUILDKIT=1
              export BUILDKIT_PROGRESS=plain
              
              # 重新构建前端（限制内存使用）
              echo "🔨 重新构建前端镜像（优化内存使用）..."
              docker-compose -f deploy/docker-compose.yml build --no-cache frontend
              
              # 启动前端服务
              echo "🚀 启动前端服务..."
              docker-compose -f deploy/docker-compose.yml up -d frontend
              
              # 前端健康检查
              echo "🏥 前端服务健康检查..."
              for i in {1..20}; do
                  if curl -f -s http://localhost:80 > /dev/null 2>&1; then
                      echo "✅ 前端服务修复成功！"
                      break
                  fi
                  if [ $i -eq 20 ]; then
                      echo "❌ 前端服务仍有问题"
                      docker-compose -f deploy/docker-compose.yml logs --tail=30 frontend
                  fi
                  echo "⏳ 等待前端服务... ($i/20)"
                  sleep 3
              done
            fi
            
            if [[ "${{ github.event.inputs.fix_type }}" == "backend" || "${{ github.event.inputs.fix_type }}" == "both" ]]; then
              echo "🔧 修复后端服务..."
              
              # 停止后端服务
              docker-compose -f deploy/docker-compose.yml stop backend || true
              
              # 重新构建后端
              echo "🔨 重新构建后端镜像..."
              docker-compose -f deploy/docker-compose.yml build --no-cache backend
              
              # 启动后端服务
              echo "🚀 启动后端服务..."
              docker-compose -f deploy/docker-compose.yml up -d backend
              
              # 后端健康检查
              echo "🏥 后端服务健康检查..."
              for i in {1..30}; do
                  if curl -f -s http://localhost:8888/health > /dev/null 2>&1; then
                      echo "✅ 后端服务修复成功！"
                      break
                  fi
                  if [ $i -eq 30 ]; then
                      echo "❌ 后端服务仍有问题"
                      docker-compose -f deploy/docker-compose.yml logs --tail=30 backend
                  fi
                  echo "⏳ 等待后端服务... ($i/30)"
                  sleep 3
              done
            fi
            
            echo "📊 最终服务状态："
            docker-compose -f deploy/docker-compose.yml ps
            
            echo "🎉 紧急修复完成！"
            echo "📱 前端地址: http://43.165.186.134"
            echo "🔧 后端API: http://43.165.186.134/api"
            echo "🏥 后端健康: http://43.165.186.134:8888/health" 