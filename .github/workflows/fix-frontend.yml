name: 🚀 Deploy All Services - 全量部署

on:
  workflow_dispatch:
    inputs:
      description:
        description: '部署描述'
        required: false
        default: '全量部署所有服务'

jobs:
  deploy-all:
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 执行全量部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            echo "🚀 开始全量部署所有服务..."
            
            # 确保 Docker 环境是最新版本
            echo "🐳 检查并更新 Docker 环境..."
            if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
              echo "🚀 Docker 或 Docker Compose V2 未安装，开始自动安装/更新..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              echo "✅ Docker 环境更新完成"
            else
              echo "✅ Docker 环境已是最新或已安装 Compose V2."
            fi

            cd /opt/gin-vue-admin

            # 步骤 1: 强制拉取最新代码
            echo "🚚 [1/5] 获取最新代码并强制覆盖本地..."
            git fetch origin
            git reset --hard origin/dev-mqtt

            # 步骤 2: 创建前端环境配置文件
            echo "📝 [2/5] 创建前端生产环境配置..."
            cat > web/.env.production << 'EOF'
            VITE_CLI_PORT = 80
            VITE_SERVER_PORT = 8888
            VITE_BASE_API = '/api'
            VITE_BASE_PATH = ''
            VITE_EDITOR = vscode
            VITE_POSITION = open
            EOF

            # 步骤 3: 停止并移除旧服务
            echo "⏹️ [3/5] 停止并移除所有旧服务..."
            docker compose -f deploy/docker-compose.yml down --remove-orphans

            # 步骤 4: 重建并启动所有服务
            echo "🔨 [4/5] 重建并启动所有服务..."
            docker compose -f deploy/docker-compose.yml up -d --build --no-cache

            # 步骤 5: 全面健康检查
            echo "🏥 [5/5] 执行全面服务健康检查..."
            echo "⏰ 等待服务稳定启动 (60秒)..."
            sleep 60

            # 检查前端
            if curl -f -s http://localhost:80 > /dev/null; then
                echo "✅ 前端服务正常"
            else
                echo "❌ 前端服务异常"
                echo "--- 前端服务日志 ---"
                docker compose -f deploy/docker-compose.yml logs --tail=50 frontend
            fi

            # 检查后端
            if curl -f -s http://localhost:8888/health > /dev/null; then
                echo "✅ 后端服务正常"
            else
                echo "❌ 后端服务异常"
                echo "--- 后端服务日志 ---"
                docker compose -f deploy/docker-compose.yml logs --tail=50 backend
            fi

            echo "🎉 部署流程执行完毕！"
            echo "📊 最终服务状态："
            docker compose -f deploy/docker-compose.yml ps 