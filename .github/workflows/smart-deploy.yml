name: 🚀 Smart Deployment - 智能化增量部署

on:
  push:
    branches: [ dev-mqtt, main ]
  workflow_dispatch:
    inputs:
      force_deploy_all:
        description: '强制部署所有服务'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  IMAGE_PREFIX: gva
  # 通用部署脚本段
  DEPLOY_COMMON_SCRIPT: |
    # 通用初始化函数
    init_deployment() {
      echo "🔧 初始化部署环境..."
      
      # 检查并创建/启用 Swap 交换空间（仅在需要时）
      if [ "$(free | grep Swap | awk '{print $2}')" -eq 0 ]; then
        echo "🤔 未发现Swap, 正在创建4GB Swap空间..."
        sudo fallocate -l 4G /swapfile 2>/dev/null || sudo dd if=/dev/zero of=/swapfile bs=1M count=4096
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
        echo "✅ Swap创建并启用成功!"
      else
        echo "✅ Swap已存在."
      fi

      # 拉取最新代码
      echo "📥 获取最新代码并强制覆盖本地..."
      git fetch origin
      git reset --hard origin/dev-mqtt
      
      # 清理Docker构建缓存（有选择性的清理）
      docker builder prune -f --filter="until=168h" || true
    }

    # 等待服务健康的通用函数
    wait_for_service() {
      local service_name=$1
      local check_command=$2
      local max_attempts=${3:-30}
      local wait_time=${4:-3}
      
      echo "⏰ 等待 $service_name 服务健康..."
      for i in $(seq 1 $max_attempts); do
        if eval "$check_command" &>/dev/null; then
          echo "✅ $service_name 服务已健康"
          return 0
        fi
        echo "⏳ 等待 $service_name 服务健康... ($i/$max_attempts)"
        sleep $wait_time
      done
      echo "❌ $service_name 服务健康检查超时"
      return 1
    }

    # 创建前端环境配置
    create_frontend_config() {
      echo "📝 创建前端生产环境配置..."
      cat > web/.env.production << 'EOF'
    VITE_CLI_PORT = 80
    VITE_SERVER_PORT = 8888
    VITE_BASE_API = '/api'
    VITE_BASE_PATH = ''
    VITE_EDITOR = vscode
    VITE_POSITION = open
    EOF
    }

jobs:
  # 检测变化的文件和服务
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      infra_changed: ${{ steps.changes.outputs.infra }}
      deploy_all: ${{ github.event.inputs.force_deploy_all == true || steps.force-all.outputs.force == 'true' }}
    steps:
      - name: 🔍 检查代码变化
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔄 检测服务变化
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'server/**'
            frontend:
              - 'web/**'
              - '!web/node_modules/**'
            infra:
              - 'deploy/**'
              - '**/Dockerfile'
              - '**/docker-compose.yml'
      
      - name: 🎯 检查是否需要强制全量部署
        id: force-all
        run: |
          # 如果是手动触发且没有强制全量部署，或者基础设施文件发生变化，则需要全量部署
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_deploy_all }}" != "true" ]]; then
            echo "force=false" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.changes.outputs.infra }}" == "true" ]]; then
            echo "force=true" >> $GITHUB_OUTPUT
          else
            echo "force=false" >> $GITHUB_OUTPUT
          fi

  # 智能部署后端服务
  deploy-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_changed == 'true' && needs.detect-changes.outputs.frontend_changed == 'false' && needs.detect-changes.outputs.deploy_all == 'false'
    steps:
      - name: 🚀 部署后端服务
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e  # 遇到错误立即退出
            cd /opt/gin-vue-admin
            
            # 导入通用函数
            eval "${{ env.DEPLOY_COMMON_SCRIPT }}"
            
            echo "🔧 智能部署后端服务..."
            init_deployment
            
            # 确保依赖服务运行
            echo "🔍 启动依赖服务..."
            docker-compose -f deploy/docker-compose.yml up -d mysql redis
            
            # 等待依赖服务健康
            wait_for_service "MySQL" "docker-compose -f deploy/docker-compose.yml exec -T mysql mysqladmin ping -h localhost -u root -pGva123456! --silent" 30 3
            wait_for_service "Redis" "docker-compose -f deploy/docker-compose.yml exec -T redis redis-cli -a 'Gva123456!' ping | grep -q PONG" 20 2
            
            # 只重建后端服务
            echo "🔨 重建后端镜像..."
            docker-compose -f deploy/docker-compose.yml build backend
            
            # 重启后端服务
            echo "🔄 重启后端服务..."
            docker-compose -f deploy/docker-compose.yml up -d backend
            
            # 健康检查
            if ! wait_for_service "Backend" "curl -f -s http://localhost:8888/health" 30 3; then
              echo "❌ 后端服务重启失败，查看日志："
              docker-compose -f deploy/docker-compose.yml logs --tail=20 backend
              exit 1
            fi
            echo "✅ 后端服务部署成功"

  # 智能部署前端服务
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend_changed == 'true' && needs.detect-changes.outputs.backend_changed == 'false' && needs.detect-changes.outputs.deploy_all == 'false'
    steps:
      - name: 🚀 部署前端服务
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e  # 遇到错误立即退出
            cd /opt/gin-vue-admin
            
            # 导入通用函数
            eval "${{ env.DEPLOY_COMMON_SCRIPT }}"
            
            echo "🎨 智能部署前端服务..."
            init_deployment
            create_frontend_config
            
            # 确保后端服务运行
            echo "🔍 确保依赖服务状态..."
            docker-compose -f deploy/docker-compose.yml up -d mysql redis backend
            
            # 等待后端服务健康
            if ! wait_for_service "Backend" "curl -f -s http://localhost:8888/health" 20 3; then
              echo "⚠️ 后端服务未完全就绪，但继续前端部署"
            fi
            
            # 只重建前端服务
            echo "🔨 重建前端镜像..."
            docker-compose -f deploy/docker-compose.yml build --no-cache frontend
            
            # 重启前端服务
            echo "🔄 重启前端服务..."
            docker-compose -f deploy/docker-compose.yml up -d frontend
            
            # 健康检查
            if ! wait_for_service "Frontend" "curl -f -s http://localhost:80" 15 2; then
              echo "❌ 前端服务重启失败，查看日志："
              docker-compose -f deploy/docker-compose.yml logs --tail=20 frontend
              exit 1
            fi
            echo "✅ 前端服务部署成功"

  # 智能部署多个服务（当前端和后端同时变化时）
  deploy-multiple:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_changed == 'true' && needs.detect-changes.outputs.frontend_changed == 'true' && needs.detect-changes.outputs.deploy_all == 'false'
    steps:
      - name: 🚀 智能部署多个服务
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e  # 遇到错误立即退出
            cd /opt/gin-vue-admin
            
            # 导入通用函数
            eval "${{ env.DEPLOY_COMMON_SCRIPT }}"
            
            echo "🔧 智能部署前端和后端服务..."
            init_deployment
            create_frontend_config
            
            # 确保依赖服务运行
            echo "🔍 启动依赖服务..."
            docker-compose -f deploy/docker-compose.yml up -d mysql redis
            
            # 等待依赖服务健康
            wait_for_service "MySQL" "docker-compose -f deploy/docker-compose.yml exec -T mysql mysqladmin ping -h localhost -u root -pGva123456! --silent" 30 3
            wait_for_service "Redis" "docker-compose -f deploy/docker-compose.yml exec -T redis redis-cli -a 'Gva123456!' ping | grep -q PONG" 20 2
            
            # 重建前端和后端服务
            echo "🔨 重建前端和后端镜像..."
            docker-compose -f deploy/docker-compose.yml build --no-cache frontend backend
            
            # 重启服务
            echo "🔄 重启前端和后端服务..."
            docker-compose -f deploy/docker-compose.yml up -d frontend backend
            
            # 健康检查
            echo "🏥 服务健康检查..."
            sleep 30  # 给服务一些启动时间
            
            # 检查前端
            if ! wait_for_service "Frontend" "curl -f -s http://localhost:80" 15 2; then
              echo "❌ 前端服务重启失败"
              docker-compose -f deploy/docker-compose.yml logs --tail=20 frontend
            fi
            
            # 检查后端
            if ! wait_for_service "Backend" "curl -f -s http://localhost:8888/health" 30 3; then
              echo "❌ 后端服务重启失败"
              docker-compose -f deploy/docker-compose.yml logs --tail=20 backend
              exit 1
            fi
            echo "✅ 多服务部署成功"

  # 全量部署（备用）
  deploy-all:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_all == 'true'
    steps:
      - name: 🚀 全量部署所有服务
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e  # 遇到错误立即退出
            cd /opt/gin-vue-admin
            
            # 导入通用函数
            eval "${{ env.DEPLOY_COMMON_SCRIPT }}"
            
            echo "🚀 全量部署所有服务..."
            init_deployment
            create_frontend_config
            
            # 停止所有服务
            echo "⏹️ 停止旧服务..."
            docker-compose -f deploy/docker-compose.yml down || true
            
            # 重建并启动所有服务
            echo "🔨 重建并启动所有服务..."
            docker-compose -f deploy/docker-compose.yml build --no-cache
            docker-compose -f deploy/docker-compose.yml up -d
            
            # 全面健康检查
            echo "🏥 全面服务健康检查..."
            sleep 60  # 给所有服务充足的启动时间
            
            # 检查前端
            if wait_for_service "Frontend" "curl -f -s http://localhost:80" 20 3; then
              echo "✅ 前端服务正常"
            else
              echo "❌ 前端服务异常"
            fi
            
            # 检查后端
            if wait_for_service "Backend" "curl -f -s http://localhost:8888/health" 30 3; then
              echo "✅ 后端服务正常"
            else
              echo "❌ 后端服务异常"
              docker-compose -f deploy/docker-compose.yml logs --tail=30 backend
              exit 1
            fi
            echo "✅ 全量部署完成"

  # 部署状态通知
  notify:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend, deploy-frontend, deploy-multiple, deploy-all]
    if: always()
    steps:
      - name: 📢 部署结果通知
        run: |
          echo "🎯 智能部署完成！"
          echo "📋 变化检测结果："
          echo "  - 后端变化: ${{ needs.detect-changes.outputs.backend_changed }}"
          echo "  - 前端变化: ${{ needs.detect-changes.outputs.frontend_changed }}"
          echo "  - 基础设施变化: ${{ needs.detect-changes.outputs.infra_changed }}"
          echo "  - 触发全量部署: ${{ needs.detect-changes.outputs.deploy_all }}"
          
          echo "🚀 部署执行情况："
          for job in deploy-backend deploy-frontend deploy-multiple deploy-all; do
            result_var="needs.${job}.result"
            result="${{ needs.deploy-backend.result }}${{ needs.deploy-frontend.result }}${{ needs.deploy-multiple.result }}${{ needs.deploy-all.result }}"
            
            case "${job}" in
              "deploy-backend")
                result="${{ needs.deploy-backend.result }}"
                name="后端服务"
                ;;
              "deploy-frontend") 
                result="${{ needs.deploy-frontend.result }}"
                name="前端服务"
                ;;
              "deploy-multiple")
                result="${{ needs.deploy-multiple.result }}"
                name="多服务"
                ;;
              "deploy-all")
                result="${{ needs.deploy-all.result }}"
                name="全量"
                ;;
            esac
            
            case "${result}" in
              "success") echo "  ✅ ${name}部署成功" ;;
              "skipped") echo "  ⏭️ ${name}部署跳过（无变化）" ;;
              "failure") echo "  ❌ ${name}部署失败" ;;
              "") echo "  ⏭️ ${name}部署未执行" ;;
            esac
          done 