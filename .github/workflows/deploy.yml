name: 自动部署到服务器

on:
  push:
    branches: [ main, dev-mqtt]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "🚀 开始部署分支: ${{ github.ref_name }}"
          echo "📦 仓库地址: ${{ github.repository }}"
          
          # 确保服务器有必要的工具
          echo "🔧 检查并安装必要工具..."
          
          # 检测系统类型
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
          elif type lsb_release >/dev/null 2>&1; then
            OS=$(lsb_release -si)
          else
            OS=$(uname -s)
          fi
          echo "📋 检测到系统: $OS"
          
          # 安装 Git
          if ! command -v git &> /dev/null; then
            echo "❌ Git 未安装，正在安装..."
            if command -v apt-get &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y git
            elif command -v yum &> /dev/null; then
              sudo yum install -y git
            elif command -v dnf &> /dev/null; then
              sudo dnf install -y git
            else
              echo "❌ 无法识别包管理器，请手动安装git"
              exit 1
            fi
            echo "✅ Git 安装完成"
          else
            echo "✅ Git 已安装"
          fi
          
          # 安装 Docker
          if ! command -v docker &> /dev/null; then
            echo "❌ Docker 未安装，正在安装..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            echo "✅ Docker 安装完成"
          else
            echo "✅ Docker 已安装"
            sudo systemctl start docker
          fi
          
          # 安装 Docker Compose
          if ! command -v docker-compose &> /dev/null; then
            echo "❌ Docker Compose 未安装，正在安装..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "✅ Docker Compose 安装完成"
          else
            echo "✅ Docker Compose 已安装"
          fi
          
          # 配置SSH密钥访问GitHub
          echo "🔑 配置SSH密钥访问GitHub..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 生成SSH密钥（如果不存在）
          if [ ! -f ~/.ssh/id_rsa ]; then
            echo "🔐 生成SSH密钥..."
            ssh-keygen -t rsa -b 4096 -C "deploy@server" -f ~/.ssh/id_rsa -N ""
            echo "✅ SSH密钥生成完成"
            echo "📋 请将以下公钥添加到GitHub Deploy Keys:"
            echo "----------------------------------------"
            cat ~/.ssh/id_rsa.pub
            echo "----------------------------------------"
            echo "⚠️  如果这是首次部署，请先添加Deploy Key到GitHub仓库设置中"
          else
            echo "✅ SSH密钥已存在"
          fi
          
          # 添加GitHub主机密钥
          if ! grep -q "github.com" ~/.ssh/known_hosts 2>/dev/null; then
            echo "🔗 添加GitHub主机密钥..."
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>/dev/null
            echo "✅ GitHub主机密钥添加完成"
          else
            echo "✅ GitHub主机密钥已存在"
          fi
          
          # 设置SSH配置
          cat > ~/.ssh/config << EOF
          Host github.com
              HostName github.com
              User git
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config
          
          # 测试SSH连接
          echo "🧪 测试SSH连接到GitHub..."
          if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
            echo "✅ SSH连接测试成功"
            USE_SSH=true
          else
            echo "⚠️  SSH连接失败，将使用HTTPS方式（可能不稳定）"
            USE_SSH=false
            
            # 配置Git HTTPS优化设置
            git config --global http.postBuffer 524288000
            git config --global http.maxRequestBuffer 100M
            git config --global core.compression 0
            git config --global http.lowSpeedLimit 0
            git config --global http.lowSpeedTime 999999
          fi
          
          # 清理并重新克隆项目（确保最新代码）
          echo "🗂️ 准备项目目录..."
          sudo rm -rf /opt/gin-vue-admin
          sudo mkdir -p /opt/gin-vue-admin
          cd /opt/gin-vue-admin
          
          echo "📥 克隆项目代码..."
          if [ "$USE_SSH" = true ]; then
            echo "🔑 使用SSH方式克隆（推荐）..."
            REPO_URL="git@github.com:${{ github.repository }}.git"
          else
            echo "🌐 使用HTTPS方式克隆（备用）..."
            REPO_URL="https://github.com/${{ github.repository }}"
          fi
          
          echo "📦 仓库URL: $REPO_URL"
          if git clone -b ${{ github.ref_name }} "$REPO_URL" .; then
            echo "✅ 代码克隆成功"
            echo "📋 使用的克隆方式: $(if [ "$USE_SSH" = true ]; then echo "SSH"; else echo "HTTPS"; fi)"
          else
            echo "❌ 代码克隆失败"
            if [ "$USE_SSH" = true ]; then
              echo "🔄 SSH失败，尝试HTTPS方式..."
              git clone -b ${{ github.ref_name }} "https://github.com/${{ github.repository }}" .
              if [ $? -eq 0 ]; then
                echo "✅ HTTPS克隆成功"
              else
                echo "❌ HTTPS克隆也失败，请检查网络和权限"
                exit 1
              fi
            else
              echo "❌ 请检查网络连接和仓库权限"
              exit 1
            fi
          fi
          
          echo "🔍 验证克隆结果..."
          echo "📁 当前目录: $(pwd)"
          echo "📋 查看文件结构:"
          ls -la
          
          # 检查关键文件是否存在
          if [ ! -f "deploy/docker-compose.yml" ]; then
            echo "❌ 关键文件 deploy/docker-compose.yml 不存在"
            echo "📂 deploy 目录内容:"
            ls -la deploy/ || echo "deploy 目录不存在"
            exit 1
          else
            echo "✅ 关键文件验证通过"
          fi
          
          echo "⏹️ 停止旧服务..."
          sudo docker-compose -f deploy/docker-compose.yml down || true
          
          echo "🔨 构建并启动新服务..."
          sudo docker-compose -f deploy/docker-compose.yml up -d --build
          
          echo "⏰ 等待服务启动..."
          sleep 30
          
          echo "📊 检查服务状态:"
          sudo docker-compose -f deploy/docker-compose.yml ps
          
          echo "🎉 部署完成！"
          echo "🌐 前端访问地址: http://${{ secrets.SERVER_HOST }}"
          echo "🔧 后端API地址: http://${{ secrets.SERVER_HOST }}:8888"
          echo "📋 查看日志: sudo docker-compose -f /opt/gin-vue-admin/deploy/docker-compose.yml logs -f" 