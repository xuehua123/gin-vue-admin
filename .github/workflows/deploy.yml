name: 自动部署到服务器

on:
  push:
    branches: [ main, dev-mqtt]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "🚀 开始部署分支: ${{ github.ref_name }}"
          echo "📦 仓库地址: ${{ github.repository }}"
          
          # 确保服务器有必要的工具
          echo "🔧 检查并安装必要工具..."
          
          # 检测系统类型
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
          elif type lsb_release >/dev/null 2>&1; then
            OS=$(lsb_release -si)
          else
            OS=$(uname -s)
          fi
          echo "📋 检测到系统: $OS"
          
          # 安装 Git
          if ! command -v git &> /dev/null; then
            echo "❌ Git 未安装，正在安装..."
            if command -v apt-get &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y git
            elif command -v yum &> /dev/null; then
              sudo yum install -y git
            elif command -v dnf &> /dev/null; then
              sudo dnf install -y git
            else
              echo "❌ 无法识别包管理器，请手动安装git"
              exit 1
            fi
            echo "✅ Git 安装完成"
          else
            echo "✅ Git 已安装"
          fi
          
          # 安装 Docker (针对 OpenCloudOS 优化)
          if ! command -v docker &> /dev/null; then
            echo "❌ Docker 未安装，正在安装..."
            
            # 检查是否为 OpenCloudOS 或类似的 RHEL 系统
            if [[ "$OS" =~ "OpenCloudOS" ]] || [[ "$OS" =~ "Rocky" ]] || [[ "$OS" =~ "CentOS" ]] || [[ "$OS" =~ "Red Hat" ]]; then
              echo "🔧 检测到 RHEL 系列系统，使用 dnf/yum 安装..."
              
              # 删除旧版本
              sudo dnf remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine 2>/dev/null || true
              
              # 安装必要的包
              sudo dnf install -y yum-utils device-mapper-persistent-data lvm2
              
              # 添加 Docker 官方仓库
              sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo || {
                echo "⚠️ 官方仓库添加失败，尝试使用阿里云镜像..."
                sudo dnf config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
              }
              
              # 安装 Docker
              sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin || {
                echo "⚠️ 从仓库安装失败，尝试直接安装..."
                sudo dnf install -y docker
              }
              
            else
              # 其他系统使用官方脚本
              echo "🔧 使用官方安装脚本..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              rm -f get-docker.sh
            fi
            
            # 启动并设置开机自启
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            echo "✅ Docker 安装完成"
          else
            echo "✅ Docker 已安装"
            sudo systemctl start docker
          fi
          
          # 安装 Docker Compose (修复方式)
          if ! command -v docker-compose &> /dev/null; then
            echo "❌ Docker Compose 未安装，正在安装..."
            
            # 尝试多种安装方式
            if command -v dnf &> /dev/null; then
              # 优先使用包管理器
              sudo dnf install -y docker-compose 2>/dev/null || {
                echo "📦 从包管理器安装失败，下载二进制文件..."
                COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d'"' -f4)
                sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
              }
            else
              # 下载二进制文件
              COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d'"' -f4)
              sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi
            
            echo "✅ Docker Compose 安装完成"
            echo "🔍 验证 Docker Compose: $(docker-compose --version)"
          else
            echo "✅ Docker Compose 已安装"
          fi
          
          # 配置SSH密钥访问GitHub
          echo "🔑 配置SSH密钥访问GitHub..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 生成SSH密钥（如果不存在）
          if [ ! -f ~/.ssh/id_rsa ]; then
            echo "🔐 生成SSH密钥..."
            ssh-keygen -t rsa -b 4096 -C "deploy@server" -f ~/.ssh/id_rsa -N ""
            echo "✅ SSH密钥生成完成"
            echo "📋 请将以下公钥添加到GitHub Deploy Keys:"
            echo "----------------------------------------"
            cat ~/.ssh/id_rsa.pub
            echo "----------------------------------------"
            echo "⚠️  如果这是首次部署，请先添加Deploy Key到GitHub仓库设置中"
          else
            echo "✅ SSH密钥已存在"
          fi
          
          # 添加GitHub主机密钥
          if ! grep -q "github.com" ~/.ssh/known_hosts 2>/dev/null; then
            echo "🔗 添加GitHub主机密钥..."
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>/dev/null
            echo "✅ GitHub主机密钥添加完成"
          else
            echo "✅ GitHub主机密钥已存在"
          fi
          
          # 设置SSH配置
          cat > ~/.ssh/config << EOF
          Host github.com
              HostName github.com
              User git
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config
          
          # 测试SSH连接
          echo "🧪 测试SSH连接到GitHub..."
          if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
            echo "✅ SSH连接测试成功"
            USE_SSH=true
          else
            echo "⚠️  SSH连接失败，将使用HTTPS方式（可能不稳定）"
            USE_SSH=false
            
            # 配置Git HTTPS优化设置
            git config --global http.postBuffer 524288000
            git config --global http.maxRequestBuffer 100M
            git config --global core.compression 0
            git config --global http.lowSpeedLimit 0
            git config --global http.lowSpeedTime 999999
          fi
          
          # 智能获取最新代码（增量更新）
          echo "🗂️ 准备项目目录..."
          sudo mkdir -p /opt/gin-vue-admin
          
          if [ -d "/opt/gin-vue-admin/.git" ]; then
            echo "📂 检测到现有仓库，执行增量更新..."
            cd /opt/gin-vue-admin
            
            # 清理可能的本地修改
            git reset --hard HEAD
            git clean -fd
            
            # 设置远程仓库URL
            if [ "$USE_SSH" = true ]; then
              echo "🔑 使用SSH方式更新（推荐）..."
              REPO_URL="git@github.com:${{ github.repository }}.git"
            else
              echo "🌐 使用HTTPS方式更新（备用）..."
              REPO_URL="https://github.com/${{ github.repository }}"
            fi
            
            git remote set-url origin "$REPO_URL"
            
            # 拉取最新代码
            echo "📥 拉取最新代码..."
            if git fetch origin ${{ github.ref_name }} && git checkout ${{ github.ref_name }} && git pull origin ${{ github.ref_name }}; then
              echo "✅ 增量更新成功"
              echo "📋 使用的更新方式: $(if [ "$USE_SSH" = true ]; then echo "SSH"; else echo "HTTPS"; fi)"
            else
              echo "⚠️ 增量更新失败，回退到全量克隆..."
              cd /opt
              sudo rm -rf gin-vue-admin
              sudo mkdir -p gin-vue-admin
              cd gin-vue-admin
              
              if git clone -b ${{ github.ref_name }} "$REPO_URL" .; then
                echo "✅ 全量克隆成功"
              else
                echo "❌ 全量克隆也失败，请检查网络和权限"
                exit 1
              fi
            fi
          else
            echo "📥 首次部署，执行全量克隆..."
            cd /opt/gin-vue-admin
            
            if [ "$USE_SSH" = true ]; then
              echo "🔑 使用SSH方式克隆（推荐）..."
              REPO_URL="git@github.com:${{ github.repository }}.git"
            else
              echo "🌐 使用HTTPS方式克隆（备用）..."
              REPO_URL="https://github.com/${{ github.repository }}"
            fi
            
            echo "📦 仓库URL: $REPO_URL"
            if git clone -b ${{ github.ref_name }} "$REPO_URL" .; then
              echo "✅ 首次克隆成功"
              echo "📋 使用的克隆方式: $(if [ "$USE_SSH" = true ]; then echo "SSH"; else echo "HTTPS"; fi)"
            else
              echo "❌ 代码克隆失败"
              if [ "$USE_SSH" = true ]; then
                echo "🔄 SSH失败，尝试HTTPS方式..."
                git clone -b ${{ github.ref_name }} "https://github.com/${{ github.repository }}" .
                if [ $? -eq 0 ]; then
                  echo "✅ HTTPS克隆成功"
                else
                  echo "❌ HTTPS克隆也失败，请检查网络和权限"
                  exit 1
                fi
              else
                echo "❌ 请检查网络连接和仓库权限"
                exit 1
              fi
            fi
          fi
          
          echo "🔍 验证克隆结果..."
          echo "📁 当前目录: $(pwd)"
          echo "📋 查看文件结构:"
          ls -la
          
          # 检查关键文件是否存在
          if [ ! -f "deploy/docker-compose.yml" ]; then
            echo "❌ 关键文件 deploy/docker-compose.yml 不存在"
            echo "📂 deploy 目录内容:"
            ls -la deploy/ || echo "deploy 目录不存在"
            exit 1
          else
            echo "✅ 关键文件验证通过"
          fi
          
          # 验证 Docker 和 Docker Compose 可用性
          echo "🔧 验证 Docker 环境..."
          if ! docker --version; then
            echo "❌ Docker 不可用"
            exit 1
          fi
          
          if ! docker-compose --version; then
            echo "❌ Docker Compose 不可用"
            exit 1
          fi
          
          echo "⏹️ 停止旧服务..."
          docker-compose -f deploy/docker-compose.yml down || true
          
          echo "🧹 清理旧的数据卷（如需要）..."
          # 注意：这会删除数据库数据，生产环境请谨慎
          # docker volume prune -f || true
          
          echo "🔨 构建并启动基础服务 (MySQL & Redis)..."
          # 设置Docker构建超时时间（20分钟）
          export DOCKER_CLIENT_TIMEOUT=1200
          export COMPOSE_HTTP_TIMEOUT=1200
          
          # 首先启动数据库服务
          docker-compose -f deploy/docker-compose.yml up -d mysql redis
          
          echo "⏰ 等待数据库服务启动..."
          
          # 等待 MySQL 启动
          echo "🔄 等待 MySQL 服务启动..."
          for i in {1..60}; do
              if docker-compose -f deploy/docker-compose.yml exec -T mysql mysqladmin ping -h "localhost" -u root -p"Gva123456!" --silent 2>/dev/null; then
                  echo "✅ MySQL 服务已启动"
                  break
              fi
              if [ $i -eq 60 ]; then
                  echo "❌ MySQL 启动超时，查看日志："
                  docker-compose -f deploy/docker-compose.yml logs mysql
                  exit 1
              fi
              echo "⏳ 等待 MySQL 启动... ($i/60)"
              sleep 2
          done
          
          # 等待 Redis 启动
          echo "🔄 等待 Redis 服务启动..."
          for i in {1..30}; do
              if docker-compose -f deploy/docker-compose.yml exec -T redis redis-cli -a "Gva123456!" ping 2>/dev/null | grep -q PONG; then
                  echo "✅ Redis 服务已启动"
                  break
              fi
              if [ $i -eq 30 ]; then
                  echo "❌ Redis 启动超时，查看日志："
                  docker-compose -f deploy/docker-compose.yml logs redis
                  exit 1
              fi
              echo "⏳ 等待 Redis 启动... ($i/30)"
              sleep 2
          done
          
          echo "🔨 构建并启动应用服务..."
          # 现在启动前端和后端
          docker-compose -f deploy/docker-compose.yml up -d --build frontend backend
          
          echo "⏰ 等待应用服务启动..."
          sleep 45
          
          echo "📊 检查服务状态:"
          docker-compose -f deploy/docker-compose.yml ps
          
          echo "🔍 检查端口占用:"
          ss -tlnp | grep -E ':(80|3306|6379|8888)' || echo "未检测到服务端口"
          
          echo "🏥 服务健康检查:"
          
          # 检查前端服务
          if curl -f -s http://localhost:80 > /dev/null; then
              echo "✅ 前端服务正常"
          else
              echo "❌ 前端服务异常"
              docker-compose -f deploy/docker-compose.yml logs --tail=10 frontend
          fi
          
          # 检查后端服务（可能需要时间初始化数据库）
          echo "⏳ 等待后端服务完全启动..."
          for i in {1..30}; do
              if curl -f -s http://localhost:8888/health > /dev/null 2>&1; then
                  echo "✅ 后端服务正常"
                  break
              fi
              if [ $i -eq 30 ]; then
                  echo "⚠️ 后端服务未响应，查看日志："
                  docker-compose -f deploy/docker-compose.yml logs --tail=20 backend
              fi
              echo "⏳ 检查后端服务... ($i/30)"
              sleep 3
          done
          
          echo "📋 查看最新服务日志:"
          docker-compose -f deploy/docker-compose.yml logs --tail=10
          
          echo "🎉 部署完成！"
          echo ""
          echo "🌍 服务访问地址:"
          echo "📱 前端地址: http://${{ secrets.SERVER_HOST }}"
          echo "🔧 后端 API: http://${{ secrets.SERVER_HOST }}/api"
          echo "📊 API 文档: http://${{ secrets.SERVER_HOST }}/api/swagger/index.html"
          echo ""
          echo "🔧 管理命令:"
          echo "查看日志: cd /opt/gin-vue-admin && docker-compose -f deploy/docker-compose.yml logs -f"
          echo "重启服务: cd /opt/gin-vue-admin && docker-compose -f deploy/docker-compose.yml restart"
          echo "停止服务: cd /opt/gin-vue-admin && docker-compose -f deploy/docker-compose.yml down" 