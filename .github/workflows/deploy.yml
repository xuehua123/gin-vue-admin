name: 自动部署到服务器

on:
  push:
    branches: [ main, dev-mqtt]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 打包项目文件
      run: |
        # 排除不必要的文件和目录
        tar -czf project.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='project.tar.gz' \
          .
        
    - name: 传输文件到服务器
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: "project.tar.gz"
        target: "/tmp/"
        
    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "🚀 开始部署分支: ${{ github.ref_name }}"
          echo "📦 仓库地址: ${{ github.repository }}"
          
          # 确保服务器有必要的工具
          echo "🔧 检查并安装必要工具..."
          
          # 检测系统类型
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
          elif type lsb_release >/dev/null 2>&1; then
            OS=$(lsb_release -si)
          else
            OS=$(uname -s)
          fi
          echo "📋 检测到系统: $OS"
          
          # 安装 Docker
          if ! command -v docker &> /dev/null; then
            echo "❌ Docker 未安装，正在安装..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            echo "✅ Docker 安装完成"
          else
            echo "✅ Docker 已安装"
            sudo systemctl start docker
          fi
          
          # 安装 Docker Compose
          if ! command -v docker-compose &> /dev/null; then
            echo "❌ Docker Compose 未安装，正在安装..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "✅ Docker Compose 安装完成"
          else
            echo "✅ Docker Compose 已安装"
          fi
          
          # 准备项目目录
          echo "🗂️ 准备项目目录..."
          sudo rm -rf /opt/gin-vue-admin
          sudo mkdir -p /opt/gin-vue-admin
          cd /opt/gin-vue-admin
          
          # 解压传输的项目文件
          echo "📦 解压项目文件..."
          if [ -f "/tmp/project.tar.gz" ]; then
            sudo tar -xzf /tmp/project.tar.gz -C /opt/gin-vue-admin
            sudo rm -f /tmp/project.tar.gz
            echo "✅ 项目文件解压成功"
          else
            echo "❌ 项目文件不存在"
            exit 1
          fi
          
          echo "🔍 验证克隆结果..."
          echo "📁 当前目录: $(pwd)"
          echo "📋 查看文件结构:"
          ls -la
          
          # 检查关键文件是否存在
          if [ ! -f "deploy/docker-compose.yml" ]; then
            echo "❌ 关键文件 deploy/docker-compose.yml 不存在"
            echo "📂 deploy 目录内容:"
            ls -la deploy/ || echo "deploy 目录不存在"
            exit 1
          else
            echo "✅ 关键文件验证通过"
          fi
          
          echo "⏹️ 停止旧服务..."
          sudo docker-compose -f deploy/docker-compose.yml down || true
          
          echo "🔨 构建并启动新服务..."
          sudo docker-compose -f deploy/docker-compose.yml up -d --build
          
          echo "⏰ 等待服务启动..."
          sleep 30
          
          echo "📊 检查服务状态:"
          sudo docker-compose -f deploy/docker-compose.yml ps
          
          echo "🎉 部署完成！"
          echo "🌐 前端访问地址: http://${{ secrets.SERVER_HOST }}"
          echo "🔧 后端API地址: http://${{ secrets.SERVER_HOST }}:8888"
          echo "📋 查看日志: sudo docker-compose -f /opt/gin-vue-admin/deploy/docker-compose.yml logs -f" 